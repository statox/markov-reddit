/*
 * This file reads the titles from a file generated by getPost.js
 * and generenate a model for the markov chain.
 * The model is then written to the file system
 */
const lineReader = require('line-reader');
const fs = require('fs');

const CONF = require('./config.json');
const ORDER = CONF["ORDER"];
const POSTS_FILE = CONF["POSTS_FILE"];
const MODEL_FILE = CONF["MODEL_FILE"];

/*
 * To work properly, this function needs a text file "titles.txt"
 * containing one title by line without escaped characters or decorations
 */
var markovMap = {words : {}, beginnings : {}, size : 0}

lineReader.eachLine(POSTS_FILE, function(title, last) {
    var currentWords = title.split(" ");
    // Don't keep titles with less words than ORDER
    if (currentWords.length < ORDER) {
        console.log("Rejecting the title:", title);
        return;
    }
    var currentBeginning = "";

    // Get the first ORDER words to get the beginning to save
    for (var j=0; j < ORDER; j++) {
        currentBeginning += currentWords[j];
        if (j < ORDER - 1) {
            currentBeginning += " ";
        }
    }

    // Add the beginning to the beginning list (or update this beginning count)
    if (!markovMap.beginnings[currentBeginning]) {
        markovMap.beginnings[currentBeginning] = 1;
    } else {
        markovMap.beginnings[currentBeginning] += 1;
    }
    // Update the number of lines in the markovMap size
    markovMap.size += 1;

    // Create the Ngrams and their following words
    for (var j=0; j < currentWords.length - ORDER; j++) {
        var currentNgram = currentWords.slice(j, j+ORDER).join(" ")
        var followingWord = currentWords[j + ORDER];

        if (!markovMap.words[currentNgram]) {
            markovMap.words[currentNgram] = {}
            markovMap.words[currentNgram][followingWord] = 1;
        } else {
            if (!markovMap.words[currentNgram][followingWord]) {
                markovMap.words[currentNgram][followingWord] = 1
            } else {
                markovMap.words[currentNgram][followingWord] += 1
            }
        }
    }

    // Persist the new model to the file system
    if(last){
        console.log("Markov chain model generated in", MODEL_FILE);
        fs.writeFileSync(MODEL_FILE, JSON.stringify(markovMap));
    }
});
